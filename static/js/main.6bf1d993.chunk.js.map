{"version":3,"sources":["components/GithubUser.js","components/GithubForm.js","components/Github.js","components/App.js","serviceWorker.js","index.js"],"names":["GithubUser","user","Object","entries","length","constructor","message","href","html_url","className","name","src","avatar_url","alt","hireable","public_repos","followers","following","GithubForm","onSubmit","useState","userName","setUserName","e","preventDefault","htmlFor","type","onChange","target","value","Github","setUser","fetch","then","res","json","getStats","userInfo","console","log","catch","err","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"wMAoBeA,EAlBI,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACpB,OAAoC,IAAhCC,OAAOC,QAAQF,GAAMG,QAAgBH,EAAKI,cAAgBH,OACrD,GAELD,EAAKK,QAAgB,4BAAKL,EAAKK,SAGjC,uBAAGC,KAAMN,EAAKO,SAAUC,UAAU,eAChC,wBAAIA,UAAU,YAAYR,EAAKS,MAC/B,yBAAKC,IAAKV,EAAKW,WAAYC,IAAKZ,EAAKS,OACrC,8CAAoBT,EAAKa,UAAY,OAArC,aACA,+CAAqBb,EAAKc,cAC1B,4CAAkBd,EAAKe,WACvB,4CAAkBf,EAAKgB,aCedC,EA5BI,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACHC,mBAAS,IADN,mBAC5BC,EAD4B,KAClBC,EADkB,KAUnC,OACE,0BAAMH,SANa,SAAAI,GACnBA,EAAEC,iBACFL,EAASE,KAKP,2BAAOI,QAAQ,YAAf,sEAGA,yBAAKhB,UAAU,gBACb,2BACEiB,KAAK,OACLC,SAfgB,SAAAJ,GAAC,OAAID,EAAYC,EAAEK,OAAOC,QAgB1CA,MAAOR,EACPX,KAAK,aAEP,6CCGOoB,EAvBA,WAAO,IAAD,EACKV,mBAAS,IADd,mBACZnB,EADY,KACN8B,EADM,KAenB,OACE,yBAAKtB,UAAU,UACb,kBAAC,EAAD,CAAYU,SAXK,SAAAE,IAHJ,SAAAA,GAAQ,OACvBW,MAAM,gCAAD,OAAiCX,IAAYY,MAAK,SAAAC,GAAG,OAAIA,EAAIC,WAGlEC,CAASf,GACNY,MAAK,SAAAI,GACJN,EAAQM,GACRC,QAAQC,IAAIF,MAEbG,OAAM,SAAAC,GAAG,OAAIC,MAAM,gCAAD,OAAiCD,UAMpD,kBAAC,EAAD,CAAYxC,KAAMA,M,gBCTT0C,EATH,WACV,OACE,oCACE,kBAAC,IAAD,CAAcpC,KAAK,mDACnB,kBAAC,EAAD,QCIcqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAkB,GACLpB,QAAQoB,MAAMA,EAAMpD,a","file":"static/js/main.6bf1d993.chunk.js","sourcesContent":["import React from 'react';\n\nconst GithubUser = ({ user }) => {\n  if (Object.entries(user).length === 0 && user.constructor === Object)\n    return '';\n\n  if (user.message) return <h3>{user.message}</h3>;\n\n  return (\n    <a href={user.html_url} className=\"github-user\">\n      <h1 className=\"username\">{user.name}</h1>\n      <img src={user.avatar_url} alt={user.name} />\n      <span>This user is {user.hireable || 'not '} hirable.</span>\n      <span>Public Repos: {user.public_repos}</span>\n      <span>Followers: {user.followers}</span>\n      <span>Following: {user.following}</span>\n    </a>\n  );\n};\n\nexport default GithubUser;\n","import React, { useState } from 'react';\n\nconst GithubForm = ({ onSubmit }) => {\n  const [userName, setUserName] = useState('');\n\n  const handleNameInput = e => setUserName(e.target.value);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(userName);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"userName\">\n        Please enter a Github Username to view information about that User\n      </label>\n      <div className=\"search-field\">\n        <input\n          type=\"text\"\n          onChange={handleNameInput}\n          value={userName}\n          name=\"userName\"\n        />\n        <button>Search</button>\n      </div>\n    </form>\n  );\n};\n\nexport default GithubForm;\n","import React, { useState } from 'react';\nimport GithubUser from './GithubUser';\nimport GithubForm from './GithubForm';\n\nconst Github = () => {\n  const [user, setUser] = useState({});\n\n  const getStats = userName =>\n    fetch(`https://api.github.com/users/${userName}`).then(res => res.json());\n\n  const handleSubmit = userName => {\n    getStats(userName)\n      .then(userInfo => {\n        setUser(userInfo);\n        console.log(userInfo);\n      })\n      .catch(err => alert(`Uh-oh! Something went wrong! ${err}`));\n  };\n\n  return (\n    <div className=\"github\">\n      <GithubForm onSubmit={handleSubmit} />\n      <GithubUser user={user} />\n    </div>\n  );\n};\n\nexport default Github;\n","import React from 'react';\nimport Github from './Github';\nimport GithubCorner from 'react-github-corner';\n\nconst App = () => {\n  return (\n    <>\n      <GithubCorner href=\"https://github.com/TaylorBeeston/GithubAPITest\" />\n      <Github />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}